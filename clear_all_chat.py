"""
Script para zerar TUDO relacionado a chat e inst√¢ncias no Railway.
Respeita todas as foreign keys.
"""
import psycopg2

DB_URL = "postgresql://postgres:wDxByyoBGIzFwodHccWSkeLmqCcuwpVt@caboose.proxy.rlwy.net:25280/railway"

def main():
    print("\n" + "="*80)
    print("üóëÔ∏è  ZERAR CHAT + INST√ÇNCIAS - RAILWAY")
    print("="*80)
    
    try:
        conn = psycopg2.connect(DB_URL)
        cursor = conn.cursor()
        print("‚úÖ Conectado ao banco Railway!")
    except Exception as e:
        print(f"‚ùå Erro ao conectar: {e}")
        return
    
    # Ver estat√≠sticas antes
    print("\nüìä ESTAT√çSTICAS ANTES:")
    
    tables_to_check = [
        'chat_attachment',
        'chat_message', 
        'chat_conversation',
        'campaigns_contact',
        'campaigns_message',
        'notifications_whatsapp_connection_log',
        'notifications_whatsapp_instance',
        'connections_evolutionconnection'
    ]
    
    stats = {}
    for table in tables_to_check:
        try:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            count = cursor.fetchone()[0]
            stats[table] = count
            print(f"  - {table}: {count}")
        except:
            stats[table] = 0
            print(f"  - {table}: 0 (n√£o existe)")
    
    # Confirmar
    print("\n" + "="*80)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Isso vai DELETAR TUDO relacionado a:")
    print("   - Chat (conversas, mensagens, anexos)")
    print("   - Campanhas (contatos, mensagens)")
    print("   - Inst√¢ncias WhatsApp")
    print("   - Conex√µes Evolution")
    print("\n   ISSO √â IRREVERS√çVEL!")
    print("="*80)
    
    confirm = input("\n‚ùì Digite 'ZERAR TUDO' para confirmar: ")
    
    if confirm != 'ZERAR TUDO':
        print("\n‚ùå Opera√ß√£o cancelada")
        conn.close()
        return
    
    print("\nüóëÔ∏è  Deletando...")
    
    try:
        # ORDEM CORRETA (do mais dependente para o menos)
        
        # 1. Chat: Anexos (depende de mensagens)
        cursor.execute("DELETE FROM chat_attachment")
        print(f"‚úÖ Anexos: {cursor.rowcount} deletados")
        
        # 2. Chat: Mensagens (depende de conversas)
        cursor.execute("DELETE FROM chat_message")
        print(f"‚úÖ Mensagens chat: {cursor.rowcount} deletadas")
        
        # 3. Chat: Participantes M2M
        cursor.execute("DELETE FROM chat_conversation_participants")
        print(f"‚úÖ Participantes: {cursor.rowcount} deletados")
        
        # 4. Chat: Conversas
        cursor.execute("DELETE FROM chat_conversation")
        print(f"‚úÖ Conversas: {cursor.rowcount} deletadas")
        
        # 5. Campanhas: Logs
        cursor.execute("DELETE FROM campaigns_log")
        print(f"‚úÖ Logs campanhas: {cursor.rowcount} deletados")
        
        # 6. Campanhas: Contatos - REMOVER REFER√äNCIAS ANTES
        cursor.execute("UPDATE campaigns_contact SET instance_used_id = NULL WHERE instance_used_id IS NOT NULL")
        print(f"‚úÖ Refer√™ncias de inst√¢ncias removidas: {cursor.rowcount}")
        
        cursor.execute("UPDATE campaigns_contact SET message_used_id = NULL WHERE message_used_id IS NOT NULL")
        print(f"‚úÖ Refer√™ncias de mensagens removidas: {cursor.rowcount}")
        
        # 7. Campanhas: Mensagens (AGORA sim pode deletar)
        cursor.execute("DELETE FROM campaigns_message")
        print(f"‚úÖ Mensagens campanhas: {cursor.rowcount} deletadas")
        
        # 8. Campanhas: Inst√¢ncias M2M (campaigns_campaign_instances)
        cursor.execute("DELETE FROM campaigns_campaign_instances")
        print(f"‚úÖ Rela√ß√£o campanhas-inst√¢ncias: {cursor.rowcount} deletadas")
        
        # 9. Inst√¢ncias: Connection logs
        cursor.execute("DELETE FROM notifications_whatsapp_connection_log")
        print(f"‚úÖ Connection logs: {cursor.rowcount} deletados")
        
        # 10. Inst√¢ncias: WhatsApp
        cursor.execute("DELETE FROM notifications_whatsapp_instance")
        print(f"‚úÖ WhatsApp instances: {cursor.rowcount} deletadas")
        
        # 11. Conex√µes Evolution
        cursor.execute("DELETE FROM connections_evolutionconnection")
        print(f"‚úÖ Evolution connections: {cursor.rowcount} deletadas")
        
        # Commit
        conn.commit()
        
        print("\n" + "="*80)
        print("‚úÖ TUDO DELETADO COM SUCESSO!")
        print("="*80)
        
        # Mostrar estat√≠sticas depois
        print("\nüìä ESTAT√çSTICAS DEPOIS:")
        for table in tables_to_check:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                print(f"  - {table}: {count}")
            except:
                print(f"  - {table}: 0 (n√£o existe)")
        
        print("\n" + "="*80)
        print("üéâ BANCO LIMPO!")
        print("="*80)
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("   1. ‚úÖ C√≥digo corrigido j√° est√° no Railway")
        print("   2. üîß Criar nova inst√¢ncia no Evolution API")
        print("   3. üì± Criar registro no Flow Chat")
        print("   4. üîó Conectar (escanear QR code)")
        print("   5. ‚úÖ Testar: nome/foto corretos + tempo real")
        print("\nüí° N√ÉO ESQUE√áA:")
        print("   - Adicionar vari√°vel: CHAT_LOG_LEVEL=WARNING")
        print("   - Isso reduz logs em 80-90%!")
        
    except Exception as e:
        print(f"\n‚ùå Erro ao deletar: {e}")
        conn.rollback()
    
    conn.close()

if __name__ == '__main__':
    main()

