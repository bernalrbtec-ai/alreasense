#!/usr/bin/env python
"""
Script para iniciar ambiente de desenvolvimento local
"""
import subprocess
import sys
import time
import requests
from datetime import datetime

def run_command(command, description):
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Sucesso")
            return True
        else:
            print(f"‚ùå {description} - Erro:")
            print(f"   {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exce√ß√£o: {e}")
        return False

def check_service_health(url, service_name, timeout=30):
    print(f"üîç Verificando {service_name}...")
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {service_name} est√° funcionando")
                return True
        except requests.exceptions.RequestException:
            pass
        
        time.sleep(2)
    
    print(f"‚ùå {service_name} n√£o respondeu em {timeout}s")
    return False

def start_local_development():
    print("="*80)
    print("üöÄ INICIANDO AMBIENTE DE DESENVOLVIMENTO LOCAL")
    print("="*80)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    
    # 1. Parar containers existentes
    if not run_command("docker compose down", "Parando containers existentes"):
        print("‚ö†Ô∏è Continuando mesmo com erro ao parar containers...")
    
    # 2. Construir e iniciar containers
    print("\nüê≥ Construindo e iniciando containers...")
    print("   Isso pode levar alguns minutos na primeira vez...")
    
    if not run_command("docker compose up --build -d", "Construindo e iniciando containers"):
        print("‚ùå Falha ao iniciar containers")
        return False
    
    # 3. Aguardar servi√ßos ficarem prontos
    print("\n‚è≥ Aguardando servi√ßos ficarem prontos...")
    time.sleep(10)
    
    # 4. Verificar sa√∫de dos servi√ßos
    print("\nüè• Verificando sa√∫de dos servi√ßos...")
    
    services = [
        ("http://localhost:8000/api/health/", "Backend API"),
        ("http://localhost:80", "Frontend"),
    ]
    
    all_healthy = True
    for url, name in services:
        if not check_service_health(url, name, timeout=60):
            all_healthy = False
    
    # 5. Mostrar status final
    print("\n" + "="*80)
    print("üìä STATUS FINAL")
    print("="*80)
    
    if all_healthy:
        print("üéâ TODOS OS SERVI√áOS FUNCIONANDO!")
        print()
        print("üìã URLs dispon√≠veis:")
        print("   ‚Ä¢ Frontend: http://localhost:80")
        print("   ‚Ä¢ Backend API: http://localhost:8000")
        print("   ‚Ä¢ Admin Django: http://localhost:8000/admin/")
        print()
        print("üß™ PR√ìXIMOS PASSOS:")
        print("   1. Acesse: http://localhost:80")
        print("   2. Fa√ßa login com usu√°rio de teste")
        print("   3. Teste o sistema de notifica√ß√µes")
        print("   4. Verifique se o menu aparece para usu√°rios com acesso")
        print()
        print("üîß COMANDOS √öTEIS:")
        print("   ‚Ä¢ Ver logs: docker compose logs -f")
        print("   ‚Ä¢ Parar: docker compose down")
        print("   ‚Ä¢ Reiniciar: docker compose restart")
    else:
        print("‚ùå ALGUNS SERVI√áOS N√ÉO EST√ÉO FUNCIONANDO")
        print()
        print("üîç Para debugar:")
        print("   ‚Ä¢ Ver logs: docker compose logs -f")
        print("   ‚Ä¢ Verificar containers: docker compose ps")
        print("   ‚Ä¢ Reiniciar: docker compose restart")
    
    return all_healthy

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("Uso: python start_local_dev.py")
        print("Inicia o ambiente de desenvolvimento local completo")
        return
    
    try:
        start_local_development()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Interrompido pelo usu√°rio")
        print("Para parar os containers: docker compose down")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        print("Para parar os containers: docker compose down")

if __name__ == '__main__':
    main()
