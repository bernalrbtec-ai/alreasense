# Generated by Django 4.2.25 on 2025-10-10 11:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("tenancy", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="WhatsAppInstance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "friendly_name",
                    models.CharField(
                        default="Instância WhatsApp",
                        help_text="Nome amigável para o cliente (pode repetir entre clientes)",
                        max_length=100,
                    ),
                ),
                (
                    "instance_name",
                    models.CharField(
                        help_text="Nome da instância no Evolution API (UUID interno)",
                        max_length=100,
                    ),
                ),
                (
                    "api_url",
                    models.URLField(
                        blank=True,
                        help_text="URL da Evolution API (geralmente usa servidor global)",
                        null=True,
                    ),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="API Key específica da instância",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Número do WhatsApp conectado",
                        max_length=20,
                    ),
                ),
                (
                    "qr_code",
                    models.TextField(
                        blank=True, help_text="QR Code para conexão (se necessário)"
                    ),
                ),
                (
                    "qr_code_expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Quando o QR code expira", null=True
                    ),
                ),
                (
                    "connection_state",
                    models.CharField(
                        default="close",
                        help_text="Estado da conexão (open, close, connecting)",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Ativa"),
                            ("inactive", "Inativa"),
                            ("error", "Erro"),
                        ],
                        default="inactive",
                        max_length=20,
                    ),
                ),
                ("last_check", models.DateTimeField(blank=True, null=True)),
                ("last_error", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False, help_text="Instância padrão para notificações"
                    ),
                ),
                (
                    "delay_min_seconds",
                    models.IntegerField(
                        default=20,
                        help_text="Delay mínimo entre envios de campanha (segundos)",
                    ),
                ),
                (
                    "delay_max_seconds",
                    models.IntegerField(
                        default=50,
                        help_text="Delay máximo entre envios de campanha (segundos)",
                    ),
                ),
                (
                    "evolution_instance_name",
                    models.CharField(
                        blank=True,
                        help_text="Nome da instância no Evolution (geralmente igual a instance_name)",
                        max_length=100,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_whatsapp_instances",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant específico (null = instância global)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="whatsapp_instances",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "WhatsApp Instance",
                "verbose_name_plural": "WhatsApp Instances",
                "db_table": "notifications_whatsapp_instance",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WhatsAppConnectionLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("created", "Criada"),
                            ("qr_generated", "QR Code Gerado"),
                            ("qr_scanned", "QR Code Escaneado"),
                            ("connected", "Conectada"),
                            ("disconnected", "Desconectada"),
                            ("error", "Erro"),
                        ],
                        max_length=20,
                    ),
                ),
                ("details", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "instance",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="connection_logs",
                        to="notifications.whatsappinstance",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuário que executou a ação",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "WhatsApp Connection Log",
                "verbose_name_plural": "WhatsApp Connection Logs",
                "db_table": "notifications_whatsapp_connection_log",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SMTPConfig",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome identificador da configuração", max_length=100
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        help_text="Servidor SMTP (ex: smtp.gmail.com)", max_length=255
                    ),
                ),
                (
                    "port",
                    models.IntegerField(
                        default=587, help_text="Porta SMTP (587 para TLS, 465 para SSL)"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        help_text="Usuário/Email para autenticação", max_length=255
                    ),
                ),
                (
                    "password",
                    django_cryptography.fields.encrypt(
                        models.CharField(help_text="Senha do email", max_length=255)
                    ),
                ),
                (
                    "use_tls",
                    models.BooleanField(
                        default=True, help_text="Usar TLS (Transport Layer Security)"
                    ),
                ),
                (
                    "use_ssl",
                    models.BooleanField(
                        default=False, help_text="Usar SSL (Secure Sockets Layer)"
                    ),
                ),
                (
                    "verify_ssl",
                    models.BooleanField(
                        default=True,
                        help_text="Verificar certificado SSL (desative se usar certificado auto-assinado)",
                    ),
                ),
                (
                    "from_email",
                    models.EmailField(help_text="Email do remetente", max_length=254),
                ),
                (
                    "from_name",
                    models.CharField(
                        blank=True,
                        help_text="Nome do remetente (ex: Alrea Sense)",
                        max_length=100,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Configuração padrão para envio de emails",
                    ),
                ),
                ("last_test", models.DateTimeField(blank=True, null=True)),
                (
                    "last_test_status",
                    models.CharField(
                        blank=True,
                        choices=[("success", "Sucesso"), ("failed", "Falhou")],
                        max_length=20,
                    ),
                ),
                ("last_test_error", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_smtp_configs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant específico (null = configuração global)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="smtp_configs",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "SMTP Configuration",
                "verbose_name_plural": "SMTP Configurations",
                "db_table": "notifications_smtp_config",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NotificationTemplate",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome identificador do template", max_length=100
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[("email", "Email"), ("whatsapp", "WhatsApp")],
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("welcome", "Boas-vindas"),
                            ("plan_change", "Alteração de Plano"),
                            ("payment_due", "Vencimento de Pagamento"),
                            ("payment_success", "Pagamento Confirmado"),
                            ("payment_failed", "Falha no Pagamento"),
                            ("trial_ending", "Fim do Período Trial"),
                            ("account_suspended", "Conta Suspensa"),
                            ("account_reactivated", "Conta Reativada"),
                            ("password_reset", "Redefinição de Senha"),
                            ("custom", "Personalizado"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "subject",
                    models.CharField(
                        blank=True, help_text="Assunto do email", max_length=200
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        help_text="Conteúdo do template. Use {{variavel}} para variáveis dinâmicas"
                    ),
                ),
                (
                    "html_content",
                    models.TextField(
                        blank=True, help_text="Conteúdo HTML do email (opcional)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "is_global",
                    models.BooleanField(
                        default=False,
                        help_text="Template global (disponível para todos os tenants)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_templates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tenant específico (null = template global)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_templates",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification Template",
                "verbose_name_plural": "Notification Templates",
                "db_table": "notifications_template",
                "ordering": ["-created_at"],
                "unique_together": {("tenant", "name", "type")},
            },
        ),
        migrations.CreateModel(
            name="NotificationLog",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("recipient_email", models.EmailField(blank=True, max_length=254)),
                ("recipient_phone", models.CharField(blank=True, max_length=20)),
                (
                    "type",
                    models.CharField(
                        choices=[("email", "Email"), ("whatsapp", "WhatsApp")],
                        max_length=20,
                    ),
                ),
                ("subject", models.CharField(blank=True, max_length=200)),
                ("content", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendente"),
                            ("sent", "Enviado"),
                            ("failed", "Falhou"),
                            ("delivered", "Entregue"),
                            ("read", "Lido"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("error_message", models.TextField(blank=True)),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="ID externo (Evolution message ID, etc.)",
                        max_length=255,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("sent_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("read_at", models.DateTimeField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Dados adicionais (context, tracking, etc.)",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="logs",
                        to="notifications.notificationtemplate",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_logs",
                        to="tenancy.tenant",
                    ),
                ),
                (
                    "whatsapp_instance",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="logs",
                        to="notifications.whatsappinstance",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification Log",
                "verbose_name_plural": "Notification Logs",
                "db_table": "notifications_log",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "status"],
                        name="notificatio_tenant__c2eb0e_idx",
                    ),
                    models.Index(
                        fields=["recipient", "created_at"],
                        name="notificatio_recipie_7fd42e_idx",
                    ),
                    models.Index(
                        fields=["type", "status"], name="notificatio_type_a11dce_idx"
                    ),
                ],
            },
        ),
    ]
