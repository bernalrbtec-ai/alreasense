"""
Consumer RabbitMQ Puro - Sistema de Campanhas
Implementa processamento robusto sem Celery
"""
import json
import time
import random
import logging
import threading
from typing import Dict, Any, Optional
from datetime import datetime, timedelta
from django.utils import timezone
from django.db import transaction
from django.conf import settings
import pika
import requests

from .models import Campaign, CampaignContact, CampaignLog
from apps.notifications.models import WhatsAppInstance

logger = logging.getLogger(__name__)


class RabbitMQConsumer:
    """Consumer RabbitMQ para processamento de campanhas"""
    
    def __init__(self):
        self.connection = None
        self.channel = None
        self.running = False
        self.consumer_threads = {}
        self._connect()
    
    def _connect(self):
        """Estabelece conex√£o com RabbitMQ com retry autom√°tico"""
        max_retries = 5
        retry_delay = 2
        
        for attempt in range(1, max_retries + 1):
            try:
                rabbitmq_url = getattr(settings, 'RABBITMQ_URL', 'amqp://guest:guest@localhost:5672/')
                
                # Configura√ß√µes de conex√£o robustas
                connection_params = pika.URLParameters(rabbitmq_url)
                connection_params.heartbeat = 600  # 10 minutos
                connection_params.blocked_connection_timeout = 300  # 5 minutos
                connection_params.socket_timeout = 30
                connection_params.retry_delay = 2
                connection_params.connection_attempts = 3
                
                self.connection = pika.BlockingConnection(connection_params)
                self.channel = self.connection.channel()
                
                # Configurar exchanges e filas
                self._setup_queues()
                
                logger.info(f"‚úÖ [RABBITMQ] Conectado com sucesso (tentativa {attempt})")
                return
                
            except Exception as e:
                error_msg = str(e)
                # Tratar erro espec√≠fico do pika 1.3.2
                if "pop from an empty deque" in error_msg or "IndexError" in error_msg:
                    logger.error(f"üêõ [PIKA_BUG] Erro conhecido do pika (tentativa {attempt}/{max_retries}): {e}")
                    logger.info("üîß [PIKA_BUG] Tentando reconex√£o devido a bug do pika...")
                else:
                    logger.error(f"‚ùå [RABBITMQ] Erro na conex√£o (tentativa {attempt}/{max_retries}): {e}")
                
                if attempt < max_retries:
                    logger.info(f"üîÑ [RABBITMQ] Tentando novamente em {retry_delay}s...")
                    import time
                    time.sleep(retry_delay)
                    retry_delay *= 2  # Exponential backoff
                else:
                    logger.error(f"‚ùå [RABBITMQ] Falha ap√≥s {max_retries} tentativas")
                    raise
    
    def _check_connection(self):
        """Verifica se a conex√£o est√° ativa e reconecta se necess√°rio"""
        try:
            if not self.connection or self.connection.is_closed:
                logger.warning("‚ö†Ô∏è [RABBITMQ] Conex√£o perdida, reconectando...")
                self._connect()
            elif not self.channel or self.channel.is_closed:
                logger.warning("‚ö†Ô∏è [RABBITMQ] Canal perdido, reconectando...")
                self._connect()
        except Exception as e:
            error_msg = str(e)
            if "pop from an empty deque" in error_msg or "IndexError" in error_msg:
                logger.error(f"üêõ [PIKA_BUG] Erro conhecido do pika ao verificar conex√£o: {e}")
            else:
                logger.error(f"‚ùå [RABBITMQ] Erro ao verificar conex√£o: {e}")
            
            try:
                self._connect()
            except Exception as reconnect_error:
                logger.error(f"‚ùå [RABBITMQ] Falha ao reconectar: {reconnect_error}")

    def _setup_queues(self):
        """Configura filas e exchanges"""
        # Exchange principal
        self.channel.exchange_declare(
            exchange='campaigns',
            exchange_type='topic',
            durable=True
        )
        
        # Filas principais
        queues = [
            'campaign.control',      # Comandos de controle
            'campaign.messages',     # Mensagens para envio
            'campaign.retry',        # Retry de mensagens
            'campaign.dlq',          # Dead letter queue
            'campaign.health'        # Health checks
        ]
        
        for queue in queues:
            self.channel.queue_declare(queue=queue, durable=True)
            self.channel.queue_bind(
                exchange='campaigns',
                queue=queue,
                routing_key=queue
            )
    
    def start_campaign(self, campaign_id: str):
        """Inicia processamento de uma campanha"""
        try:
            logger.info(f"üöÄ [START] Iniciando campanha {campaign_id}")
            
            # Verificar conex√£o antes de iniciar campanha
            logger.info(f"üîç [START] Verificando conex√£o RabbitMQ...")
            self._check_connection()
            logger.info(f"‚úÖ [START] Conex√£o RabbitMQ OK")
            
            campaign = Campaign.objects.get(id=campaign_id)
            logger.info(f"üìã [START] Campanha encontrada: {campaign.name} (status: {campaign.status})")
            
            if campaign.status not in ['draft', 'running']:
                logger.warning(f"‚ö†Ô∏è [CONSUMER] Campanha {campaign.name} status inv√°lido: {campaign.status}")
                return False
            
            # Verificar se tem contatos
            logger.info(f"üîç [START] Verificando contatos pendentes...")
            pending_contacts = CampaignContact.objects.filter(
                campaign=campaign,
                status__in=['pending', 'sending']
            ).count()
            
            total_contacts = CampaignContact.objects.filter(campaign=campaign).count()
            logger.info(f"üîç [CONSUMER] Campanha {campaign.name}: {pending_contacts} pendentes de {total_contacts} total")
            
            if pending_contacts == 0:
                logger.warning(f"‚ö†Ô∏è [CONSUMER] Campanha {campaign.name} n√£o possui contatos pendentes")
                return False
            
            # Verificar inst√¢ncias selecionadas
            logger.info(f"üîç [START] Verificando inst√¢ncias selecionadas...")
            selected_instances = campaign.instances.filter(is_active=True).count()
            logger.info(f"üì± [START] Inst√¢ncias ativas selecionadas: {selected_instances}")
            
            if selected_instances == 0:
                logger.error(f"‚ùå [START] Nenhuma inst√¢ncia ativa selecionada para campanha {campaign.name}")
                return False
            
            # Atualizar status
            logger.info(f"üìù [START] Atualizando status para 'running'...")
            campaign.status = 'running'
            campaign.save(update_fields=['status'])
            logger.info(f"‚úÖ [START] Status atualizado com sucesso")
            
            # Log de in√≠cio
            logger.info(f"üìù [START] Criando log de in√≠cio...")
            CampaignLog.log_campaign_started(campaign)
            logger.info(f"‚úÖ [START] Log criado com sucesso")
            
            # üöÄ GATILHO: Campanha iniciada - frontend receber√° dados iniciais
            logger.info(f"üì° [WEBSOCKET] Enviando gatilho 'campaign_started' para campanha {campaign.name}")
            self._send_websocket_update(campaign, 'campaign_update', {
                'event': 'campaign_started',
                'total_contacts': total_contacts,
                'pending_contacts': pending_contacts
            })
            logger.info(f"‚úÖ [WEBSOCKET] Gatilho 'campaign_started' enviado com sucesso")
            
            # Criar fila espec√≠fica da campanha
            logger.info(f"üìã [START] Criando fila RabbitMQ...")
            queue_name = f"campaign.{campaign_id}.messages"
            self.channel.queue_declare(queue=queue_name, durable=True)
            logger.info(f"‚úÖ [START] Fila declarada: {queue_name}")
            
            self.channel.queue_bind(
                exchange='campaigns',
                queue=queue_name,
                routing_key=queue_name
            )
            logger.info(f"‚úÖ [START] Fila vinculada ao exchange")
            
            # Adicionar mensagens √† fila
            logger.info(f"üì§ [START] Populando fila com mensagens...")
            self._populate_campaign_queue(campaign)
            logger.info(f"‚úÖ [START] Fila populada com sucesso")
            
            # Iniciar consumer para esta campanha
            logger.info(f"üéØ [START] Iniciando consumer...")
            self._start_campaign_consumer(campaign_id)
            logger.info(f"‚úÖ [START] Consumer iniciado")
            
            logger.info(f"üöÄ [CONSUMER] Campanha {campaign.name} iniciada com sucesso!")
            return True
            
        except Campaign.DoesNotExist:
            logger.error(f"‚ùå [CONSUMER] Campanha {campaign_id} n√£o encontrada")
            return False
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao iniciar campanha: {e}")
            return False
    
    def _populate_campaign_queue(self, campaign: Campaign):
        """Popula fila com TODOS os contatos na ORDEM DE CRIA√á√ÉO - ROTA√á√ÉO PERFEITA"""
        try:
            # Buscar TODOS os contatos pendentes na ORDEM DE CRIA√á√ÉO
            contacts = CampaignContact.objects.filter(
                campaign=campaign,
                status__in=['pending', 'sending']
            ).select_related('contact').order_by('created_at')  # ‚Üê ORDEM DE CRIA√á√ÉO
            
            if not contacts.exists():
                logger.warning(f"‚ö†Ô∏è [CONSUMER] Nenhum contato pendente para campanha {campaign.name}")
                return
            
            # üéØ USAR APENAS INST√ÇNCIAS SELECIONADAS NA CAMPANHA
            instances = campaign.instances.filter(is_active=True).order_by('created_at')
            
            if not instances.exists():
                logger.error(f"‚ùå [CONSUMER] Nenhuma inst√¢ncia selecionada ativa para campanha {campaign.name}")
                return
            
            queue_name = f"campaign.{campaign.id}.messages"
            instances_list = list(instances)
            instance_count = len(instances_list)
            
            logger.info(f"üîÑ [ROTATION] Populando fila: {contacts.count()} contatos na ORDEM DE CRIA√á√ÉO, {instance_count} inst√¢ncias")
            
            # Verificar conex√£o antes de publicar
            self._check_connection()
            
            # Processar CADA contato na ordem de cria√ß√£o com rota√ß√£o sequencial
            for i, contact in enumerate(contacts):
                # Calcular delay aleat√≥rio para este contato
                delay_seconds = random.randint(campaign.interval_min, campaign.interval_max)
                
                # Calcular √≠ndice da inst√¢ncia (round robin) baseado na ORDEM DE CRIA√á√ÉO
                instance_index = i % instance_count  # ‚Üê ROTA√á√ÉO PERFEITA baseada na ordem
                selected_instance = instances_list[instance_index]
                
                logger.info(f"üéØ [ROTATION] Contato {i+1} (ordem cria√ß√£o): selecionando inst√¢ncia {instance_index} = {selected_instance.friendly_name} (ID: {selected_instance.id})")
                
                # Criar mensagem com rota√ß√£o pr√©-calculada
                message = {
                    'campaign_id': str(campaign.id),
                    'contact_id': str(contact.contact.id),
                    'campaign_contact_id': str(contact.id),
                    'contact_phone': contact.contact.phone,
                    'message_content': self._get_message_content(campaign, i),  # ‚Üê ROTA√á√ÉO DE MENSAGENS baseada na posi√ß√£o
                    'scheduled_delay_seconds': delay_seconds,
                    'created_at': timezone.now().isoformat(),
                    'campaign_settings': {
                        'interval_min': campaign.interval_min,
                        'interval_max': campaign.interval_max,
                        'rotation_mode': campaign.rotation_mode,
                        'selected_instances': [str(inst.id) for inst in instances_list],
                        'instance_rotation_index': instance_index,  # ‚Üê ROTA√á√ÉO PR√â-CALCULADA
                        'selected_instance_id': str(selected_instance.id)  # ‚Üê INST√ÇNCIA ESPEC√çFICA
                    }
                }
                
                logger.info(f"üìù [MESSAGE] Mensagem criada para {contact.contact.name}: selected_instance_id = {str(selected_instance.id)}")
                
                # Publicar mensagem (todas na ordem correta)
                self.channel.basic_publish(
                    exchange='campaigns',
                    routing_key=queue_name,
                    body=json.dumps(message),
                    properties=pika.BasicProperties(
                        delivery_mode=2,  # Persistir mensagem
                        timestamp=int(time.time())
                    )
                )
                
                logger.info(f"üì§ [QUEUE] Contato {i+1}/{contacts.count()}: {contact.contact.name} ‚Üí {selected_instance.friendly_name} (delay: {delay_seconds}s)")
            
            logger.info(f"‚úÖ [ROTATION] Fila populada: {contacts.count()} mensagens na ORDEM DE CRIA√á√ÉO com rota√ß√£o perfeita")
            
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao popular fila: {e}")
    
    def _start_campaign_consumer(self, campaign_id: str):
        """Inicia consumer para uma campanha espec√≠fica"""
        if campaign_id in self.consumer_threads:
            logger.warning(f"‚ö†Ô∏è [CONSUMER] Consumer j√° ativo para campanha {campaign_id}")
            return
        
        def consumer_callback(ch, method, properties, body):
            try:
                message_data = json.loads(body)
                success = self._process_message(message_data)
                
                # ‚úÖ SEMPRE confirmar mensagem (nunca travar a fila)
                ch.basic_ack(delivery_tag=method.delivery_tag)
                
                if not success:
                    logger.warning(f"‚ö†Ô∏è [CONSUMER] Mensagem processada com falha, mas fila continua")
                    
            except Exception as e:
                logger.error(f"‚ùå [CONSUMER] Erro cr√≠tico ao processar mensagem: {e}")
                # ‚úÖ SEMPRE confirmar mensagem para n√£o travar a fila
                try:
                    ch.basic_ack(delivery_tag=method.delivery_tag)
                    logger.info(f"‚úÖ [CONSUMER] Mensagem confirmada mesmo com erro - fila continua")
                except Exception as ack_error:
                    logger.error(f"‚ùå [CONSUMER] Erro ao confirmar mensagem: {ack_error}")
                    # For√ßar nack apenas se ack falhar
                    try:
                        ch.basic_nack(delivery_tag=method.delivery_tag, requeue=False)
                    except:
                        pass
        
        def start_consuming():
            try:
                queue_name = f"campaign.{campaign_id}.messages"
                
                # Configurar QoS
                self.channel.basic_qos(prefetch_count=1)
                
                # Iniciar consumer
                self.channel.basic_consume(
                    queue=queue_name,
                    on_message_callback=consumer_callback,
                    auto_ack=False
                )
                
                logger.info(f"üéØ [CONSUMER] Iniciando consumer para campanha {campaign_id}")
                self.channel.start_consuming()
                
            except Exception as e:
                logger.error(f"‚ùå [CONSUMER] Erro no consumer: {e}")
            finally:
                # Remover da lista de consumers ativos
                if campaign_id in self.consumer_threads:
                    del self.consumer_threads[campaign_id]
        
        # Iniciar em thread separada
        thread = threading.Thread(target=start_consuming, daemon=True)
        thread.start()
        
        self.consumer_threads[campaign_id] = thread
        logger.info(f"üöÄ [CONSUMER] Thread iniciada para campanha {campaign_id}")
    
    def _process_message(self, message_data: Dict[str, Any]) -> bool:
        """Processa uma mensagem individual - USA INST√ÇNCIA PR√â-SELECIONADA COM DELAY"""
        try:
            campaign_id = message_data['campaign_id']
            contact_id = message_data['contact_id']
            campaign_contact_id = message_data['campaign_contact_id']
            message_content = message_data['message_content']
            contact_phone = message_data.get('contact_phone')
            scheduled_delay = message_data.get('scheduled_delay_seconds', 0)
            
            # Buscar dados
            campaign = Campaign.objects.get(id=campaign_id)
            contact = CampaignContact.objects.get(id=campaign_contact_id)
            
            # ‚è∞ APLICAR DELAY ANTES DO PROCESSAMENTO COM CONTADOR REGRESSIVO
            if scheduled_delay > 0:
                logger.info(f"‚è∞ [DELAY] Aguardando {scheduled_delay}s antes de processar {contact.contact.name}")
                
                # Atualizar informa√ß√µes da pr√≥xima mensagem na campanha
                with transaction.atomic():
                    campaign.next_message_scheduled_at = timezone.now() + timedelta(seconds=scheduled_delay)
                    campaign.next_contact_name = contact.contact.name
                    campaign.next_contact_phone = contact.contact.phone
                    campaign.save(update_fields=['next_message_scheduled_at', 'next_contact_name', 'next_contact_phone'])
                
                # WebSocket ser√° enviado apenas nos gatilhos espec√≠ficos (sem spam)
                
                # Aplicar delay com contador regressivo
                for remaining_seconds in range(scheduled_delay, 0, -1):
                    # Verificar se campanha ainda est√° ativa a cada segundo
                    campaign.refresh_from_db()
                    if campaign.status != 'running':
                        logger.warning(f"‚ö†Ô∏è [DELAY] Campanha {campaign.name} pausada durante delay - {remaining_seconds}s restantes")
                        return False
                    
                    # Log a cada 10 segundos ou nos √∫ltimos 10 segundos
                    if remaining_seconds % 10 == 0 or remaining_seconds <= 10:
                        logger.info(f"‚è∞ [DELAY] {remaining_seconds}s restantes para {contact.contact.name}")
                    
                    time.sleep(1)
                
                logger.info(f"‚úÖ [DELAY] Delay conclu√≠do - processando {contact.contact.name}")
                
                # üöÄ GATILHO: Pr√≥ximo disparo iniciando (frontend far√° contagem)
                self._send_websocket_update(campaign, 'campaign_update', {
                    'event': 'next_message_starting',
                    'contact_name': contact.contact.name,
                    'contact_phone': contact.contact.phone
                })
            
            # Verificar se campanha ainda est√° ativa ap√≥s delay
            campaign.refresh_from_db()
            if campaign.status != 'running':
                logger.warning(f"‚ö†Ô∏è [DELAY] Campanha {campaign.name} n√£o est√° mais ativa ap√≥s delay")
                return False
            
            # üéØ USAR INST√ÇNCIA PR√â-SELECIONADA (rota√ß√£o j√° calculada)
            instance = self._get_pre_selected_instance(message_data)
            if not instance:
                logger.error(f"‚ùå [PROCESSING] Inst√¢ncia pr√©-selecionada n√£o dispon√≠vel para campanha {campaign.name}")
                return False
            
            # üîí VALIDA√á√ïES CR√çTICAS DE SEGURAN√áA
            if not self._validate_message_data(campaign, contact, instance, message_data):
                logger.error(f"‚ùå [SECURITY] Valida√ß√£o de seguran√ßa falhou para campanha {campaign.name}")
                return False
            
            logger.info(f"üì§ [MESSAGE] Enviando para {contact.contact.name} ({contact_phone}) via {instance.friendly_name} (delay: {scheduled_delay}s)")
            logger.info(f"üîí [SECURITY] Tenant: {campaign.tenant.name} | Inst√¢ncia: {instance.tenant.name}")
            
            # Enviar mensagem via API com retry
            success = self._send_whatsapp_message_with_retry(instance, contact_phone, message_content, campaign)
            
            if success:
                # Atualizar status
                with transaction.atomic():
                    contact.status = 'sent'
                    contact.sent_at = timezone.now()
                    contact.save()
                    
                    campaign.messages_sent += 1
                    
                    # Atualizar informa√ß√µes do √öLTIMO disparo
                    campaign.last_contact_name = contact.contact.name
                    campaign.last_contact_phone = contact.contact.phone
                    campaign.last_message_sent_at = timezone.now()
                    
                    # Atualizar informa√ß√µes da pr√≥xima mensagem
                    next_contact = CampaignContact.objects.filter(
                        campaign=campaign,
                        status__in=['pending', 'sending']
                    ).select_related('contact').first()
                    
                    if next_contact:
                        campaign.next_contact_name = next_contact.contact.name
                        campaign.next_contact_phone = next_contact.contact.phone
                        # Calcular pr√≥ximo delay
                        next_delay = random.randint(campaign.interval_min, campaign.interval_max)
                        campaign.next_message_scheduled_at = timezone.now() + timedelta(seconds=next_delay)
                    else:
                        # Nenhum contato pendente - campanha conclu√≠da
                        campaign.next_contact_name = None
                        campaign.next_contact_phone = None
                        campaign.next_message_scheduled_at = None
                        campaign.status = 'completed'
                        campaign.completed_at = timezone.now()
                    
                    campaign.save(update_fields=['messages_sent', 'last_contact_name', 'last_contact_phone', 'last_message_sent_at', 'next_contact_name', 'next_contact_phone', 'next_message_scheduled_at', 'status', 'completed_at'])
                
                # WebSocket ser√° enviado apenas nos gatilhos espec√≠ficos (sem spam)
                
                logger.info(f"‚úÖ [MESSAGE] Mensagem enviada com sucesso via {instance.friendly_name}")
                
                # üöÄ GATILHO: Mensagem enviada - frontend atualiza e faz nova contagem
                self._send_websocket_update(campaign, 'campaign_update', {
                    'event': 'message_sent',
                    'contact_name': contact.contact.name,
                    'contact_phone': contact.contact.phone,
                    'instance_name': instance.friendly_name
                })
                
                return True
            else:
                # Marcar como falha (ap√≥s 3 tentativas)
                with transaction.atomic():
                    contact.status = 'failed'
                    contact.save()
                    
                    campaign.messages_failed += 1
                    campaign.save(update_fields=['messages_failed'])
                
                logger.error(f"‚ùå [MESSAGE] Falha ao enviar mensagem ap√≥s 3 tentativas via {instance.friendly_name}")
                
                # üöÄ GATILHO: Falha no envio
                self._send_websocket_update(campaign, 'campaign_update', {
                    'event': 'message_failed',
                    'contact_name': contact.contact.name,
                    'contact_phone': contact.contact.phone,
                    'instance_name': instance.friendly_name
                })
                
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [MESSAGE] Erro ao processar mensagem: {e}")
            return False
    
    def _get_pre_selected_instance(self, message_data: Dict[str, Any]):
        """Busca inst√¢ncia pr√©-selecionada baseada na rota√ß√£o calculada"""
        try:
            logger.info(f"üîç [INSTANCE] Buscando inst√¢ncia pr√©-selecionada...")
            logger.info(f"üîç [INSTANCE] message_data keys: {list(message_data.keys())}")
            
            campaign_settings = message_data.get('campaign_settings', {})
            logger.info(f"üîç [INSTANCE] campaign_settings keys: {list(campaign_settings.keys())}")
            
            selected_instance_id = campaign_settings.get('selected_instance_id')
            logger.info(f"üîç [INSTANCE] selected_instance_id: {selected_instance_id}")
            
            if not selected_instance_id:
                logger.error("‚ùå [INSTANCE] selected_instance_id n√£o encontrado na mensagem")
                logger.error(f"‚ùå [INSTANCE] campaign_settings completo: {campaign_settings}")
                return None
            
            # Buscar inst√¢ncia espec√≠fica
            instance = WhatsAppInstance.objects.get(
                id=selected_instance_id,
                is_active=True
            )
            
            logger.info(f"üéØ [INSTANCE] Usando inst√¢ncia pr√©-selecionada: {instance.friendly_name}")
            return instance
            
        except WhatsAppInstance.DoesNotExist:
            logger.error(f"‚ùå [INSTANCE] Inst√¢ncia {selected_instance_id} n√£o encontrada ou inativa")
            # Fallback: tentar selecionar uma inst√¢ncia dispon√≠vel
            return self._select_instance_fallback(message_data.get('campaign_settings', {}))
        except Exception as e:
            logger.error(f"‚ùå [INSTANCE] Erro ao buscar inst√¢ncia pr√©-selecionada: {e}")
            return None
    
    def _select_instance_fallback(self, campaign_settings: Dict[str, Any]):
        """Fallback: seleciona primeira inst√¢ncia dispon√≠vel"""
        try:
            selected_instances = campaign_settings.get('selected_instances', [])
            if not selected_instances:
                return None
            
            # Tentar primeira inst√¢ncia dispon√≠vel
            for instance_id in selected_instances:
                try:
                    instance = WhatsAppInstance.objects.get(
                        id=instance_id,
                        is_active=True
                    )
                    logger.info(f"üîÑ [FALLBACK] Usando inst√¢ncia alternativa: {instance.friendly_name}")
                    return instance
                except WhatsAppInstance.DoesNotExist:
                    continue
            
            logger.error("‚ùå [FALLBACK] Nenhuma inst√¢ncia dispon√≠vel encontrada")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå [FALLBACK] Erro no fallback de inst√¢ncia: {e}")
            return None
    
    def _schedule_next_message(self, campaign: Campaign):
        """Agenda pr√≥xima mensagem respeitando intervalos da campanha"""
        try:
            # Buscar pr√≥ximo contato pendente
            next_contact = CampaignContact.objects.filter(
                campaign=campaign,
                status__in=['pending', 'sending']
            ).select_related('contact').first()
            
            if not next_contact:
                logger.info(f"üèÅ [CAMPAIGN] Campanha {campaign.name} conclu√≠da - sem mais contatos")
                # Marcar campanha como conclu√≠da
                campaign.status = 'completed'
                campaign.completed_at = timezone.now()
                campaign.save(update_fields=['status', 'completed_at'])
                return
            
            # Calcular delay baseado nos intervalos da campanha
            import random
            delay_seconds = random.randint(campaign.interval_min, campaign.interval_max)
            
            logger.info(f"‚è∞ [SCHEDULE] Pr√≥xima mensagem em {delay_seconds}s para {next_contact.contact.name}")
            
            # Agendar pr√≥xima mensagem com delay
            self._schedule_message_with_delay(campaign, next_contact, delay_seconds)
            
        except Exception as e:
            logger.error(f"‚ùå [SCHEDULE] Erro ao agendar pr√≥xima mensagem: {e}")
            # üîÑ RETRY: Tentar agendar novamente em 30 segundos
            self._schedule_retry_next_message(campaign, 30, 1)
    
    def _schedule_message_with_delay(self, campaign: Campaign, contact: CampaignContact, delay_seconds: int):
        """Agenda mensagem com delay espec√≠fico"""
        try:
            import threading
            import time
            
            def delayed_message():
                # Aguardar o delay
                time.sleep(delay_seconds)
                
                # Verificar se campanha ainda est√° ativa
                campaign.refresh_from_db()
                if campaign.status != 'running':
                    logger.info(f"‚èπÔ∏è [SCHEDULE] Campanha {campaign.name} n√£o est√° mais ativa - cancelando agendamento")
                    return
                
                # Criar pr√≥xima mensagem
                message = {
                    'campaign_id': str(campaign.id),
                    'contact_id': str(contact.contact.id),
                    'campaign_contact_id': str(contact.id),
                    'instance_id': 'SELECT_AT_PROCESSING',
                    'message_content': self._get_message_content(campaign),
                    'created_at': timezone.now().isoformat(),
                    'campaign_interval_min': campaign.interval_min,
                    'campaign_interval_max': campaign.interval_max,
                    'campaign_rotation_mode': campaign.rotation_mode
                }
                
                # Verificar conex√£o antes de publicar
                self._check_connection()
                
                # Publicar mensagem agendada
                queue_name = f"campaign.{campaign.id}.messages"
                self.channel.basic_publish(
                    exchange='campaigns',
                    routing_key=queue_name,
                    body=json.dumps(message),
                    properties=pika.BasicProperties(
                        delivery_mode=2,
                        timestamp=int(time.time())
                    )
                )
                
                logger.info(f"üì§ [SCHEDULE] Mensagem agendada publicada para {contact.contact.name}")
            
            # Executar em thread separada
            thread = threading.Thread(target=delayed_message, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå [SCHEDULE] Erro ao agendar mensagem com delay: {e}")
    
    def _schedule_retry_next_message(self, campaign: Campaign, retry_delay: int, attempt: int = 1):
        """Retry para agendar pr√≥xima mensagem em caso de erro"""
        try:
            import threading
            import time
            
            def retry_schedule():
                logger.info(f"üîÑ [RETRY] Tentativa {attempt} - agendando em {retry_delay}s para campanha {campaign.name}")
                time.sleep(retry_delay)
                
                # Verificar se campanha ainda est√° ativa
                campaign.refresh_from_db()
                if campaign.status != 'running':
                    logger.info(f"‚èπÔ∏è [RETRY] Campanha {campaign.name} n√£o est√° mais ativa - cancelando retry")
                    return
                
                # Tentar agendar novamente
                try:
                    self._schedule_next_message(campaign)
                    logger.info(f"‚úÖ [RETRY] Pr√≥xima mensagem agendada com sucesso ap√≥s retry")
                except Exception as retry_error:
                    logger.error(f"‚ùå [RETRY] Falha no retry: {retry_error}")
                    # üîÑ RETRY LIMITADO - m√°ximo 3 tentativas
                    if attempt < 3:
                        next_delay = retry_delay * 2  # 30s, 60s, 120s
                        logger.info(f"üîÑ [RETRY] Tentativa {attempt + 1}/3 em {next_delay}s")
                        self._schedule_retry_next_message(campaign, next_delay, attempt + 1)
                    else:
                        logger.error(f"‚ùå [RETRY] M√°ximo de 3 tentativas atingido para campanha {campaign.name} - PARANDO RETRY")
                        # Marcar campanha como pausada por erro
                        campaign.status = 'paused'
                        campaign.save(update_fields=['status'])
                        CampaignLog.log_error(campaign, f"Campanha pausada ap√≥s 3 tentativas de retry falharem")
            
            # Executar retry em thread separada
            thread = threading.Thread(target=retry_schedule, daemon=True)
            thread.start()
            
        except Exception as e:
            logger.error(f"‚ùå [RETRY] Erro no sistema de retry: {e}")
    
    def _validate_message_data(self, campaign: Campaign, contact: CampaignContact, instance: WhatsAppInstance, message_data: Dict) -> bool:
        """Valida√ß√µes cr√≠ticas de seguran√ßa antes do envio"""
        try:
            # 1. Verificar se a inst√¢ncia pertence ao mesmo tenant da campanha
            if campaign.tenant != instance.tenant:
                logger.error(f"‚ùå [SECURITY] VIOLA√á√ÉO: Inst√¢ncia {instance.friendly_name} n√£o pertence ao tenant {campaign.tenant.name}")
                return False
            
            # 2. Verificar se o contato pertence √† campanha
            if contact.campaign != campaign:
                logger.error(f"‚ùå [SECURITY] VIOLA√á√ÉO: Contato {contact.contact.name} n√£o pertence √† campanha {campaign.name}")
                return False
            
            # 3. Verificar se o contato pertence ao mesmo tenant
            if contact.contact.tenant != campaign.tenant:
                logger.error(f"‚ùå [SECURITY] VIOLA√á√ÉO: Contato {contact.contact.name} n√£o pertence ao tenant {campaign.tenant.name}")
                return False
            
            # 4. Verificar se a inst√¢ncia est√° ativa
            if not instance.is_active:
                logger.error(f"‚ùå [SECURITY] Inst√¢ncia {instance.friendly_name} n√£o est√° ativa")
                return False
            
            # 5. Verificar se o telefone √© v√°lido
            if not contact.contact.phone or len(contact.contact.phone) < 10:
                logger.error(f"‚ùå [SECURITY] Telefone inv√°lido: {contact.contact.phone}")
                return False
            
            # 6. Verificar se a mensagem n√£o est√° vazia
            if not message_data.get('message_content') or len(message_data.get('message_content', '').strip()) == 0:
                logger.error(f"‚ùå [SECURITY] Mensagem vazia ou inv√°lida")
                return False
            
            # 7. Verificar IDs da mensagem
            expected_contact_id = str(contact.contact.id)
            if message_data.get('contact_id') != expected_contact_id:
                logger.error(f"‚ùå [SECURITY] ID do contato n√£o confere: esperado {expected_contact_id}, recebido {message_data.get('contact_id')}")
                return False
            
            expected_instance_id = str(instance.id)
            # Verificar se a inst√¢ncia est√° na lista de inst√¢ncias selecionadas da campanha
            campaign_settings = message_data.get('campaign_settings', {})
            selected_instance_id = campaign_settings.get('selected_instance_id')
            
            if selected_instance_id != expected_instance_id:
                logger.error(f"‚ùå [SECURITY] ID da inst√¢ncia n√£o confere: esperado {expected_instance_id}, recebido {selected_instance_id}")
                return False
            
            # Verificar se a inst√¢ncia est√° na lista de inst√¢ncias selecionadas
            selected_instances = campaign_settings.get('selected_instances', [])
            if expected_instance_id not in selected_instances:
                logger.error(f"‚ùå [SECURITY] Inst√¢ncia {expected_instance_id} n√£o est√° na lista de inst√¢ncias selecionadas: {selected_instances}")
                return False
            
            logger.info(f"‚úÖ [SECURITY] Todas as valida√ß√µes passaram para {contact.contact.name}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [SECURITY] Erro nas valida√ß√µes: {e}")
            return False

    def _send_whatsapp_message_with_retry(self, instance: WhatsAppInstance, phone: str, message: str, campaign: Campaign) -> bool:
        """Envia mensagem via API do WhatsApp com 3 tentativas"""
        import time
        
        for attempt in range(1, 4):  # 3 tentativas
            try:
                url = f"{instance.api_url}/message/sendText/{instance.instance_name}"
                headers = {
                    'apikey': instance.api_key,
                    'Content-Type': 'application/json'
                }
                payload = {
                    'number': phone,
                    'text': message
                }
                
                # Log detalhado do envio
                logger.info(f"üì§ [API] Tentativa {attempt}/3 - Enviando via {instance.friendly_name} para {phone}")
                logger.info(f"üîó [API] URL: {url}")
                logger.info(f"üìù [API] Conte√∫do: {message[:100]}...")
                
                response = requests.post(url, json=payload, headers=headers, timeout=30)
                response.raise_for_status()
                
                logger.info(f"‚úÖ [API] Mensagem enviada com sucesso na tentativa {attempt}")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå [API] Tentativa {attempt}/3 falhou: {e}")
                
                if attempt < 3:
                    # Delay entre tentativas: 2s, 4s
                    delay = 2 ** attempt
                    logger.info(f"‚è∞ [RETRY] Aguardando {delay}s antes da pr√≥xima tentativa")
                    time.sleep(delay)
                else:
                    logger.error(f"‚ùå [API] Todas as 3 tentativas falharam para {phone}")
                    return False
        
        return False

    def _send_whatsapp_message(self, instance: WhatsAppInstance, phone: str, message: str) -> bool:
        """Envia mensagem via API do WhatsApp (m√©todo simples para compatibilidade)"""
        try:
            url = f"{instance.api_url}/message/sendText/{instance.instance_name}"
            headers = {
                'apikey': instance.api_key,
                'Content-Type': 'application/json'
            }
            payload = {
                'number': phone,
                'text': message
            }
            
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            response.raise_for_status()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå [WHATSAPP] Erro ao enviar mensagem: {e}")
            return False
    
    def _select_instance(self, campaign: Campaign) -> Optional[WhatsAppInstance]:
        """Seleciona inst√¢ncia dispon√≠vel - APENAS INST√ÇNCIAS SELECIONADAS NA CAMPANHA"""
        try:
            # üéØ USAR APENAS INST√ÇNCIAS SELECIONADAS NA CAMPANHA (como o Celery fazia)
            available_instances = campaign.instances.filter(
                is_active=True,
                health_score__gte=campaign.pause_on_health_below
            )
            
            if not available_instances.exists():
                logger.warning(f"‚ö†Ô∏è [CONSUMER] Nenhuma inst√¢ncia dispon√≠vel para tenant {campaign.tenant.name}")
                return None
            
            logger.info(f"üîí [SEGURAN√áA] Selecionando inst√¢ncia para tenant: {campaign.tenant.name}")
            
            # Implementar l√≥gica baseada no modo de rota√ß√£o da campanha
            if campaign.rotation_mode == 'round_robin':
                # Round robin baseado em contador sequencial
                if not hasattr(self, '_round_robin_counter'):
                    self._round_robin_counter = 0
                
                self._round_robin_counter += 1
                index = self._round_robin_counter % available_instances.count()
                instance = available_instances[index]
                logger.info(f"üîÑ [ROUND_ROBIN] Selecionada inst√¢ncia: {instance.friendly_name} (index: {index})")
                return instance
            elif campaign.rotation_mode == 'intelligent':
                # Selecionar inst√¢ncia com melhor health_score
                instance = available_instances.order_by('-health_score').first()
                logger.info(f"üß† [INTELLIGENT] Selecionada inst√¢ncia: {instance.friendly_name} (health: {instance.health_score})")
                return instance
            else:
                # Fallback para primeira inst√¢ncia
                instance = available_instances.first()
                logger.info(f"üì± [DEFAULT] Selecionada inst√¢ncia: {instance.friendly_name}")
                return instance
            
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao selecionar inst√¢ncia: {e}")
            return None
    
    def _get_message_content(self, campaign: Campaign, contact_position: int = 0) -> str:
        """Obt√©m conte√∫do da mensagem com rota√ß√£o baseada na posi√ß√£o do contato"""
        try:
            # Buscar mensagens da campanha
            from .models import CampaignMessage
            messages = CampaignMessage.objects.filter(campaign=campaign).order_by('order', 'created_at')
            
            if messages.exists():
                # Implementar rota√ß√£o de mensagens baseada na posi√ß√£o do contato
                message_count = messages.count()
                message_index = contact_position % message_count
                selected_message = messages[message_index]
                
                logger.info(f"üîÑ [MESSAGE_ROTATION] Contato posi√ß√£o {contact_position}: usando mensagem {message_index + 1}/{message_count} (ID: {selected_message.id})")
                
                return selected_message.content
            else:
                logger.warning(f"‚ö†Ô∏è [CONSUMER] Nenhuma mensagem encontrada para campanha {campaign.name}")
                return f"Mensagem da campanha {campaign.name}"
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao obter conte√∫do: {e}")
            return f"Mensagem da campanha {campaign.name}"
    
    def _send_websocket_update(self, campaign, event_type, extra_data=None):
        """Envia atualiza√ß√£o WebSocket apenas em eventos espec√≠ficos"""
        try:
            logger.info(f"üîß [WEBSOCKET] Iniciando envio de {event_type} para campanha {campaign.name}")
            from channels.layers import get_channel_layer
            from asgiref.sync import async_to_sync
            
            async def send_update():
                logger.info(f"üîß [WEBSOCKET] Dentro da fun√ß√£o async para {event_type}")
                # Dados b√°sicos da campanha
                campaign_data = {
                    'type': event_type,
                    'campaign_id': str(campaign.id),
                    'campaign_name': campaign.name,
                    'status': campaign.status,
                    'messages_sent': campaign.messages_sent,
                    'messages_delivered': campaign.messages_delivered,
                    'messages_read': campaign.messages_read,
                    'messages_failed': campaign.messages_failed,
                    'total_contacts': campaign.total_contacts,
                    'progress_percentage': (campaign.messages_sent / campaign.total_contacts * 100) if campaign.total_contacts > 0 else 0,
                    'last_message_sent_at': campaign.last_message_sent_at.isoformat() if campaign.last_message_sent_at else None,
                    'next_message_scheduled_at': campaign.next_message_scheduled_at.isoformat() if campaign.next_message_scheduled_at else None,
                    'next_contact_name': campaign.next_contact_name,
                    'next_contact_phone': campaign.next_contact_phone,
                    'last_contact_name': campaign.last_contact_name,
                    'last_contact_phone': campaign.last_contact_phone,
                    'updated_at': campaign.updated_at.isoformat()
                }
                
                # Adicionar dados extras se fornecidos
                if extra_data:
                    campaign_data.update(extra_data)
                
                # Enviar via WebSocket
                channel_layer = get_channel_layer()
                if channel_layer:
                    await channel_layer.group_send(
                        f"tenant_{campaign.tenant.id}",
                        {
                            "type": "broadcast_notification",
                            "payload": campaign_data
                        }
                    )
                    logger.info(f"üì° [WEBSOCKET] {event_type} enviado para campanha {campaign.name}")
            
            # Usar async_to_sync para execu√ß√£o mais confi√°vel
            async_to_sync(send_update)()
                
        except Exception as e:
            logger.error(f"‚ùå [WEBSOCKET] Erro ao enviar {event_type}: {e}")

    async def _send_campaign_update_websocket(self, campaign):
        """Envia atualiza√ß√£o da campanha via WebSocket"""
        try:
            from channels.layers import get_channel_layer
            from asgiref.sync import async_to_sync
            
            # Calcular tempo restante
            time_remaining = None
            if campaign.next_message_scheduled_at and campaign.status == 'running':
                from django.utils import timezone
                now = timezone.now()
                if campaign.next_message_scheduled_at > now:
                    delta = campaign.next_message_scheduled_at - now
                    time_remaining = int(delta.total_seconds())
                else:
                    time_remaining = 0
            
            # Dados da campanha para WebSocket
            campaign_data = {
                'type': 'campaign_update',
                'campaign_id': str(campaign.id),
                'status': campaign.status,
                'messages_sent': campaign.messages_sent,
                'messages_delivered': campaign.messages_delivered,
                'messages_read': campaign.messages_read,
                'messages_failed': campaign.messages_failed,
                'total_contacts': campaign.total_contacts,
                'progress_percentage': (campaign.messages_sent / campaign.total_contacts * 100) if campaign.total_contacts > 0 else 0,
                'last_message': {
                    'contact_name': campaign.last_contact_name,
                    'contact_phone': campaign.last_contact_phone,
                    'sent_at': campaign.last_message_sent_at.isoformat() if campaign.last_message_sent_at else None
                },
                'next_message': {
                    'contact_name': campaign.next_contact_name,
                    'contact_phone': campaign.next_contact_phone,
                    'scheduled_at': campaign.next_message_scheduled_at.isoformat() if campaign.next_message_scheduled_at else None,
                    'time_remaining_seconds': time_remaining
                },
                'updated_at': campaign.updated_at.isoformat()
            }
            
            # Enviar via WebSocket
            channel_layer = get_channel_layer()
            if channel_layer:
                await channel_layer.group_send(
                    f"tenant_{campaign.tenant.id}",
                    {
                        "type": "broadcast_notification",
                        "payload": campaign_data
                    }
                )
                
                logger.info(f"üì° [WEBSOCKET] Atualiza√ß√£o enviada para campanha {campaign.name}")
                
        except Exception as e:
            logger.error(f"‚ùå [WEBSOCKET] Erro ao enviar atualiza√ß√£o: {e}")
    
    def _handle_failed_message(self, message_data: Dict[str, Any]):
        """Trata mensagem que falhou"""
        try:
            # Adicionar contador de retry
            message_data['retry_count'] = message_data.get('retry_count', 0) + 1
            message_data['max_retries'] = 3
            
            if message_data['retry_count'] <= message_data['max_retries']:
                # Reenviar para retry
                self.channel.basic_publish(
                    exchange='campaigns',
                    routing_key='campaign.retry',
                    body=json.dumps(message_data),
                    properties=pika.BasicProperties(
                        delivery_mode=2,
                        timestamp=int(time.time())
                    )
                )
                logger.info(f"üîÑ [RETRY] Reenviando mensagem (tentativa {message_data['retry_count']})")
            else:
                # Enviar para DLQ
                self.channel.basic_publish(
                    exchange='campaigns',
                    routing_key='campaign.dlq',
                    body=json.dumps(message_data),
                    properties=pika.BasicProperties(
                        delivery_mode=2,
                        timestamp=int(time.time())
                    )
                )
                logger.error(f"üíÄ [DLQ] Mensagem enviada para dead letter queue")
                
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao tratar mensagem falhada: {e}")
    
    def pause_campaign(self, campaign_id: str):
        """Pausa uma campanha"""
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            campaign.status = 'paused'
            campaign.save(update_fields=['status'])
            
            CampaignLog.log_campaign_paused(campaign)
            logger.info(f"‚è∏Ô∏è [CONSUMER] Campanha {campaign.name} pausada")
            
        except Campaign.DoesNotExist:
            logger.error(f"‚ùå [CONSUMER] Campanha {campaign_id} n√£o encontrada")
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao pausar campanha: {e}")
    
    def resume_campaign(self, campaign_id: str):
        """Resume uma campanha"""
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            campaign.status = 'running'
            campaign.save(update_fields=['status'])
            
            CampaignLog.log_campaign_resumed(campaign)
            logger.info(f"‚ñ∂Ô∏è [CONSUMER] Campanha {campaign.name} resumida")
            
        except Campaign.DoesNotExist:
            logger.error(f"‚ùå [CONSUMER] Campanha {campaign_id} n√£o encontrada")
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao resumir campanha: {e}")
    
    def stop_campaign(self, campaign_id: str):
        """Para uma campanha"""
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            campaign.status = 'completed'
            campaign.save(update_fields=['status'])
            
            # Parar consumer se ativo
            if campaign_id in self.consumer_threads:
                del self.consumer_threads[campaign_id]
            
            CampaignLog.log_campaign_completed(campaign)
            logger.info(f"üõë [CONSUMER] Campanha {campaign.name} parada")
            
        except Campaign.DoesNotExist:
            logger.error(f"‚ùå [CONSUMER] Campanha {campaign_id} n√£o encontrada")
        except Exception as e:
            logger.error(f"‚ùå [CONSUMER] Erro ao parar campanha: {e}")
    
    def get_active_campaigns(self) -> list:
        """Lista campanhas ativas"""
        return list(self.consumer_threads.keys())
    
    def force_start(self):
        """For√ßa o in√≠cio do consumer (para uso via admin)"""
        try:
            if not self.is_running:
                self.start(auto_start_campaigns=True)
                return True, "Consumer iniciado com sucesso"
            else:
                return False, "Consumer j√° est√° rodando"
        except Exception as e:
            return False, f"Erro ao iniciar consumer: {str(e)}"
    
    def force_stop(self):
        """For√ßa a parada do consumer (para uso via admin)"""
        try:
            if self.is_running:
                self.stop()
                return True, "Consumer parado com sucesso"
            else:
                return False, "Consumer j√° est√° parado"
        except Exception as e:
            return False, f"Erro ao parar consumer: {str(e)}"
    
    def force_restart(self):
        """For√ßa o rein√≠cio do consumer (para uso via admin)"""
        try:
            if self.is_running:
                self.stop()
                time.sleep(2)  # Aguardar um pouco
            self.start(auto_start_campaigns=True)
            return True, "Consumer reiniciado com sucesso"
        except Exception as e:
            return False, f"Erro ao reiniciar consumer: {str(e)}"
    
    def get_detailed_status(self):
        """Retorna status detalhado do consumer"""
        try:
            active_campaigns = self.get_active_campaigns()
            campaign_details = []
            
            for campaign_id in active_campaigns:
                status = self.get_campaign_status(campaign_id)
                campaign_details.append({
                    'campaign_id': campaign_id,
                    'status': status.get('status', 'unknown'),
                    'is_running': status.get('is_running', False),
                    'messages_processed': status.get('messages_processed', 0),
                    'last_activity': status.get('last_activity', None),
                })
            
            return {
                'is_running': self.is_running,
                'connection_status': 'connected' if self.connection and not self.connection.is_closed else 'disconnected',
                'active_campaigns_count': len(active_campaigns),
                'active_campaigns': active_campaigns,
                'campaign_details': campaign_details,
                'monitor_running': self.monitor_thread and self.monitor_thread.is_alive() if self.monitor_thread else False,
            }
        except Exception as e:
            return {
                'is_running': False,
                'connection_status': 'error',
                'error': str(e),
                'active_campaigns_count': 0,
                'active_campaigns': [],
                'campaign_details': [],
                'monitor_running': False,
            }
    
    def get_campaign_status(self, campaign_id: str) -> Optional[Dict[str, Any]]:
        """Retorna status de uma campanha"""
        try:
            campaign = Campaign.objects.get(id=campaign_id)
            is_active = campaign_id in self.consumer_threads
            
            return {
                'campaign_id': campaign_id,
                'campaign_name': campaign.name,
                'status': campaign.status,
                'is_consumer_active': is_active,
                'messages_sent': campaign.messages_sent,
                'messages_delivered': campaign.messages_delivered,
                'messages_failed': campaign.messages_failed
            }
            
        except Campaign.DoesNotExist:
            return None
    
    def start_health_monitor(self):
        """Inicia monitor de sa√∫de"""
        def health_monitor():
            while self.running:
                try:
                    self._perform_health_check()
                    time.sleep(30)  # Verificar a cada 30 segundos
                except Exception as e:
                    logger.error(f"‚ùå [HEALTH] Erro no monitor: {e}")
                    time.sleep(10)
        
        thread = threading.Thread(target=health_monitor, daemon=True)
        thread.start()
        logger.info("üîç [HEALTH] Monitor de sa√∫de iniciado")
    
    def _perform_health_check(self):
        """Executa verifica√ß√£o de sa√∫de"""
        try:
            # Verificar campanhas que deveriam estar rodando
            running_campaigns = Campaign.objects.filter(status='running')
            
            for campaign in running_campaigns:
                campaign_id = str(campaign.id)
                
                if campaign_id not in self.consumer_threads:
                    logger.warning(f"‚ö†Ô∏è [HEALTH] Campanha {campaign.name} deveria estar rodando mas consumer n√£o est√° ativo")
                    
                    # Tentar reiniciar
                    self.start_campaign(campaign_id)
            
            # Verificar contatos pendentes
            for campaign in running_campaigns:
                pending_count = CampaignContact.objects.filter(
                    campaign=campaign,
                    status__in=['pending', 'sending']
                ).count()
                
                if pending_count == 0:
                    logger.info(f"üéØ [HEALTH] Campanha {campaign.name} completada")
                    campaign.complete()
                
        except Exception as e:
            logger.error(f"‚ùå [HEALTH] Erro na verifica√ß√£o: {e}")
    
    def start(self, auto_start_campaigns=False):
        """Inicia o consumer"""
        self.running = True
        self.start_health_monitor()
        logger.info("üöÄ [CONSUMER] RabbitMQ Consumer iniciado")
        
        # Iniciar campanhas ativas automaticamente se solicitado
        if auto_start_campaigns:
            self._auto_start_active_campaigns()
    
    def _auto_start_active_campaigns(self):
        """Inicia automaticamente campanhas que est√£o em execu√ß√£o"""
        try:
            from .models import Campaign
            
            # Buscar campanhas em execu√ß√£o
            running_campaigns = Campaign.objects.filter(status='running')
            
            for campaign in running_campaigns:
                campaign_id = str(campaign.id)
                if campaign_id not in self.consumer_threads:
                    logger.info(f"üöÄ [AUTO-START] Iniciando campanha {campaign.name}")
                    self.start_campaign(campaign_id)
                    
            # üîÑ RECOVERY: Verificar campanhas travadas a cada 5 minutos
            self._start_campaign_recovery_monitor()
                    
        except Exception as e:
            logger.error(f"‚ùå [AUTO-START] Erro ao iniciar campanhas: {e}")
    
    def _start_campaign_recovery_monitor(self):
        """Monitor para recuperar campanhas travadas"""
        import threading
        import time
        
        def recovery_monitor():
            while self.running:
                try:
                    time.sleep(60)  # Verificar a cada 1 minuto (mais frequente)
                    
                    from .models import Campaign
                    running_campaigns = Campaign.objects.filter(status='running')
                    
                    for campaign in running_campaigns:
                        campaign_id = str(campaign.id)
                        
                        # Se campanha est√° rodando mas sem consumer ativo
                        if campaign_id not in self.consumer_threads:
                            logger.warning(f"üîÑ [RECOVERY] Campanha {campaign.name} sem consumer - reiniciando")
                            self.start_campaign(campaign_id)
                        
                        # Verificar se tem contatos pendentes mas sem processamento
                        pending_contacts = CampaignContact.objects.filter(
                            campaign=campaign,
                            status__in=['pending', 'sending']
                        ).count()
                        
                        if pending_contacts > 0:
                            # Verificar se consumer est√° ativo mas n√£o processando
                            if campaign_id in self.consumer_threads:
                                thread = self.consumer_threads[campaign_id]
                                if not thread.is_alive():
                                    logger.warning(f"üîÑ [RECOVERY] Consumer morto para {campaign.name} - reiniciando")
                                    del self.consumer_threads[campaign_id]
                                    self.start_campaign(campaign_id)
                                    
                except Exception as e:
                    logger.error(f"‚ùå [RECOVERY] Erro no monitor de recupera√ß√£o: {e}")
                    time.sleep(60)  # Aguardar 1 minuto antes de tentar novamente
        
        # Iniciar monitor em thread separada
        thread = threading.Thread(target=recovery_monitor, daemon=True)
        thread.start()
        logger.info("üîÑ [RECOVERY] Monitor de recupera√ß√£o de campanhas iniciado")
    
    def stop(self):
        """Para o consumer"""
        self.running = False
        
        if self.connection and not self.connection.is_closed:
            self.connection.close()
        
        logger.info("üõë [CONSUMER] RabbitMQ Consumer parado")


# Inst√¢ncia global do consumer - inicializada apenas quando necess√°rio
rabbitmq_consumer = None

def get_rabbitmq_consumer():
    """Obt√©m inst√¢ncia do consumer, criando se necess√°rio"""
    global rabbitmq_consumer
    if rabbitmq_consumer is None:
        try:
            rabbitmq_consumer = RabbitMQConsumer()
        except Exception as e:
            print(f"‚ö†Ô∏è [RABBITMQ] Consumer n√£o pode ser inicializado: {e}")
            rabbitmq_consumer = None
    return rabbitmq_consumer
