# Generated by Django 4.2.7 on 2025-10-09 14:23

from django.db import migrations, models
import django.db.models.deletion


def safe_alter_api_key(apps, schema_editor):
    """Safely alter api_key column type from bytea to varchar."""
    with schema_editor.connection.cursor() as cursor:
        # Verificar se a coluna existe e qual √© o tipo
        cursor.execute("""
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'connections_evolutionconnection'
            AND column_name = 'api_key'
            AND table_schema = 'public';
        """)
        result = cursor.fetchone()
        
        if result:
            current_type = result[0]
            print(f"   üìã Tipo atual de api_key: {current_type}")
            
            if current_type == 'bytea':
                # Limpar dados criptografados e alterar tipo
                print("   üîÑ Alterando tipo de bytea para varchar...")
                cursor.execute("""
                    ALTER TABLE connections_evolutionconnection 
                    ALTER COLUMN api_key TYPE VARCHAR(255) USING NULL;
                """)
                print("   ‚úÖ Tipo alterado de bytea para varchar")
            elif current_type.startswith('character varying'):
                print("   ‚è≠Ô∏è  api_key j√° √© varchar, nada a fazer")
            else:
                print(f"   ‚ö†Ô∏è  Tipo inesperado: {current_type}")
        else:
            print("   ‚ÑπÔ∏è  Coluna api_key n√£o existe (ser√° criada depois)")


def reverse_alter_api_key(apps, schema_editor):
    """Reverse operation."""
    pass  # N√£o reverter - deixar como varchar


class Migration(migrations.Migration):

    dependencies = [
        ('tenancy', '0001_initial'),
        ('connections', '0004_alter_evolutionconnection_options_and_more'),
    ]

    operations = [
        migrations.RunPython(safe_alter_api_key, reverse_alter_api_key),
    ]
