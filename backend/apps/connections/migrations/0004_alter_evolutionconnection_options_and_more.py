# Generated by Django 4.2.7 on 2025-10-09 13:33

from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


def add_fields_if_not_exist(apps, schema_editor):
    """Add fields only if they don't exist."""
    with schema_editor.connection.cursor() as cursor:
        # Check which columns already exist
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'connections_evolutionconnection'
            AND table_schema = 'public';
        """)
        existing_columns = {row[0] for row in cursor.fetchall()}
        
        # Add api_key if not exists
        if 'api_key' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN api_key bytea NULL;
            """)
            print("✅ Added api_key column")
        else:
            print("⏭️  api_key column already exists, skipping")
        
        # Add base_url if not exists
        if 'base_url' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN base_url VARCHAR(200) NULL;
            """)
            print("✅ Added base_url column")
        else:
            print("⏭️  base_url column already exists, skipping")
        
        # Add last_check if not exists
        if 'last_check' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN last_check TIMESTAMP WITH TIME ZONE NULL;
            """)
            print("✅ Added last_check column")
        else:
            print("⏭️  last_check column already exists, skipping")
        
        # Add last_error if not exists
        if 'last_error' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN last_error TEXT NULL;
            """)
            print("✅ Added last_error column")
        else:
            print("⏭️  last_error column already exists, skipping")
        
        # Add status if not exists
        if 'status' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN status VARCHAR(20) DEFAULT 'inactive' NOT NULL;
            """)
            print("✅ Added status column")
        else:
            print("⏭️  status column already exists, skipping")
        
        # Add webhook_url if not exists
        if 'webhook_url' not in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                ADD COLUMN webhook_url VARCHAR(200) NULL;
            """)
            print("✅ Added webhook_url column")
        else:
            print("⏭️  webhook_url column already exists, skipping")
        
        # Remove old columns if they exist
        if 'evo_token' in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                DROP COLUMN evo_token;
            """)
            print("✅ Removed evo_token column")
        
        if 'evo_ws_url' in existing_columns:
            cursor.execute("""
                ALTER TABLE connections_evolutionconnection 
                DROP COLUMN evo_ws_url;
            """)
            print("✅ Removed evo_ws_url column")


def remove_fields_if_exist(apps, schema_editor):
    """Reverse migration."""
    with schema_editor.connection.cursor() as cursor:
        # Check which columns exist
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'connections_evolutionconnection'
            AND table_schema = 'public';
        """)
        existing_columns = {row[0] for row in cursor.fetchall()}
        
        # Remove new columns
        for column in ['api_key', 'base_url', 'last_check', 'last_error', 'status', 'webhook_url']:
            if column in existing_columns:
                cursor.execute(f"""
                    ALTER TABLE connections_evolutionconnection 
                    DROP COLUMN {column};
                """)
                print(f"✅ Removed {column} column")


class Migration(migrations.Migration):

    dependencies = [
        ('tenancy', '0001_initial'),
        ('connections', '0003_add_evolution_fields'),
    ]

    operations = [
        migrations.RunPython(add_fields_if_not_exist, remove_fields_if_exist),
        migrations.AlterModelOptions(
            name='evolutionconnection',
            options={'ordering': ['-created_at'], 'verbose_name': 'Evolution Connection', 'verbose_name_plural': 'Evolution Connections'},
        ),
        migrations.AlterUniqueTogether(
            name='evolutionconnection',
            unique_together=set(),
        ),
    ]
