"""
Comando para configurar o sistema de billing
"""

from django.core.management.base import BaseCommand
from django.core.management import call_command
from django.db import connection


class Command(BaseCommand):
    help = 'Configura o sistema de billing completo'

    def handle(self, *args, **options):
        self.stdout.write('üöÄ Configurando sistema de billing...')
        
        # 1. Criar tabelas do billing
        self.stdout.write('üìã Criando tabelas do billing...')
        try:
            call_command('migrate', 'billing', verbosity=0)
            self.stdout.write('  ‚úÖ Tabelas criadas')
        except Exception as e:
            self.stdout.write(f'  ‚ùå Erro ao criar tabelas: {e}')
            return
        
        # 2. Popular dados iniciais
        self.stdout.write('üå± Populando dados iniciais...')
        try:
            call_command('seed_products', verbosity=0)
            self.stdout.write('  ‚úÖ Dados iniciais criados')
        except Exception as e:
            self.stdout.write(f'  ‚ùå Erro ao popular dados: {e}')
            return
        
        # 3. Verificar se tudo est√° funcionando
        self.stdout.write('üîç Verificando configura√ß√£o...')
        try:
            from apps.billing.models import Product, Plan
            products_count = Product.objects.count()
            plans_count = Plan.objects.count()
            
            self.stdout.write(f'  üì¶ Produtos: {products_count}')
            self.stdout.write(f'  üí≥ Planos: {plans_count}')
            
            if products_count > 0 and plans_count > 0:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Sistema de billing configurado com sucesso!')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå Sistema n√£o foi configurado corretamente')
                )
                
        except Exception as e:
            self.stdout.write(f'  ‚ùå Erro na verifica√ß√£o: {e}')
