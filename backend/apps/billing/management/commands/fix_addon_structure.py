from django.core.management.base import BaseCommand
from apps.billing.models import Product, Plan, PlanProduct


class Command(BaseCommand):
    help = 'Corrige a estrutura de produtos e addons'

    def handle(self, *args, **options):
        self.stdout.write("üîß Corrigindo estrutura de produtos e addons...")
        
        # Buscar produtos
        flow_product = Product.objects.get(slug='flow')
        contacts_product = Product.objects.get(slug='contacts')
        sense_product = Product.objects.get(slug='sense')
        
        # Configurar Flow nos planos Flow (inclu√≠do por padr√£o)
        flow_plans = ['flow-starter', 'flow-pro', 'flow-enterprise']
        
        for plan_slug in flow_plans:
            try:
                plan = Plan.objects.get(slug=plan_slug)
                
                # Flow inclu√≠do no plano
                flow_plan_product, created = PlanProduct.objects.get_or_create(
                    plan=plan,
                    product=flow_product,
                    defaults={
                        'is_included': True,  # Inclu√≠do no plano
                        'is_addon_available': False,  # N√£o √© addon
                        'limit_value': self.get_flow_limit(plan_slug),
                        'limit_unit': 'inst√¢ncias'
                    }
                )
                
                if created:
                    self.stdout.write(f"  ‚úÖ Flow configurado: {plan.name}")
                else:
                    flow_plan_product.is_included = True
                    flow_plan_product.is_addon_available = False
                    flow_plan_product.limit_value = self.get_flow_limit(plan_slug)
                    flow_plan_product.limit_unit = 'inst√¢ncias'
                    flow_plan_product.save()
                    self.stdout.write(f"  ‚úÖ Flow atualizado: {plan.name}")
                    
            except Plan.DoesNotExist:
                self.stdout.write(f"  ‚ö†Ô∏è Plano {plan_slug} n√£o encontrado")
        
        # Remover planos individuais de Sense e Contatos (s√£o addons, n√£o planos)
        individual_plans = [
            'sense-basic', 'sense-advanced', 'sense-unlimited',
            'contacts-basic', 'contacts-pro', 'contacts-unlimited'
        ]
        
        for plan_slug in individual_plans:
            try:
                plan = Plan.objects.get(slug=plan_slug)
                plan.delete()
                self.stdout.write(f"  üóëÔ∏è Plano removido: {plan.name} (√© addon, n√£o plano)")
            except Plan.DoesNotExist:
                pass
        
        self.stdout.write("\n‚úÖ Estrutura corrigida!")
        self.stdout.write("\nüìã Nova estrutura:")
        self.stdout.write("‚Ä¢ Flow: Produto principal inclu√≠do nos planos Flow")
        self.stdout.write("‚Ä¢ Sense: Addon dispon√≠vel nos planos Flow")
        self.stdout.write("‚Ä¢ Contatos: Addon dispon√≠vel nos planos Flow")
        self.stdout.write("‚Ä¢ API Only: Produto principal com planos pr√≥prios")

    def get_flow_limit(self, plan_slug):
        """Define limite de inst√¢ncias por plano Flow"""
        limits = {
            'flow-starter': 1,         # 1 inst√¢ncia
            'flow-pro': 3,             # 3 inst√¢ncias
            'flow-enterprise': None    # Ilimitado
        }
        return limits.get(plan_slug, 1)


