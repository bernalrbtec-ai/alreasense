# Generated by Django 4.2.25 on 2025-10-11 13:03

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("tenancy", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome da tag (ex: VIP, Lead Quente)", max_length=50
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        default="#3B82F6",
                        help_text="Cor em hexadecimal (ex: #3B82F6)",
                        max_length=7,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrição opcional da tag"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_tags",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "db_table": "contacts_tag",
                "ordering": ["name"],
                "unique_together": {("tenant", "name")},
            },
        ),
        migrations.CreateModel(
            name="ContactList",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome da lista (ex: Black Friday 2024)",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="Descrição da lista"),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, help_text="Lista ativa"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="contact_lists_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_lists",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lista de Contatos",
                "verbose_name_plural": "Listas de Contatos",
                "db_table": "contacts_list",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ContactImport",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("file_name", models.CharField(max_length=255)),
                ("file_path", models.CharField(max_length=500)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pendente"),
                            ("processing", "Processando"),
                            ("completed", "Concluído"),
                            ("failed", "Falhou"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("total_rows", models.IntegerField(default=0)),
                ("processed_rows", models.IntegerField(default=0)),
                ("created_count", models.IntegerField(default=0)),
                ("updated_count", models.IntegerField(default=0)),
                ("skipped_count", models.IntegerField(default=0)),
                ("error_count", models.IntegerField(default=0)),
                ("errors", models.JSONField(default=list)),
                (
                    "update_existing",
                    models.BooleanField(
                        default=False,
                        help_text="Atualizar contatos existentes ou apenas criar novos",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "auto_tag",
                    models.ForeignKey(
                        blank=True,
                        help_text="Tag automática para contatos importados",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contacts.tag",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_imports",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "db_table": "contacts_import",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        help_text="Telefone no formato E.164",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Telefone deve estar no formato E.164 (ex: +5511999999999)",
                                regex="^\\+?[1-9]\\d{1,14}$",
                            )
                        ],
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Nome completo do contato", max_length=200
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Email do contato (opcional)",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True,
                        help_text="Data de nascimento (usado para campanhas de aniversário)",
                        null=True,
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Masculino"),
                            ("F", "Feminino"),
                            ("O", "Outro"),
                            ("N", "Prefiro não informar"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        blank=True, help_text="Cidade", max_length=100, null=True
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True,
                        help_text="Estado (UF): SP, RJ, MG...",
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "country",
                    models.CharField(
                        default="BR",
                        help_text="País (código ISO: BR, US, AR...)",
                        max_length=2,
                    ),
                ),
                (
                    "zipcode",
                    models.CharField(
                        blank=True, help_text="CEP", max_length=10, null=True
                    ),
                ),
                (
                    "last_purchase_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Data da última compra (usado para análise RFM)",
                        null=True,
                    ),
                ),
                (
                    "last_visit_date",
                    models.DateField(
                        blank=True,
                        help_text="Data da última visita/interação",
                        null=True,
                    ),
                ),
                (
                    "total_purchases",
                    models.IntegerField(
                        default=0, help_text="Total de compras realizadas"
                    ),
                ),
                (
                    "last_purchase_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Valor da última compra",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "average_ticket",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Ticket médio de compras",
                        max_digits=10,
                    ),
                ),
                (
                    "lifetime_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Valor total gasto (LTV)",
                        max_digits=10,
                    ),
                ),
                (
                    "last_interaction_date",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Última vez que interagiu (mensagem enviada ou recebida)",
                        null=True,
                    ),
                ),
                (
                    "total_messages_received",
                    models.IntegerField(
                        default=0, help_text="Total de mensagens enviadas ao contato"
                    ),
                ),
                (
                    "total_messages_sent",
                    models.IntegerField(
                        default=0, help_text="Total de mensagens recebidas do contato"
                    ),
                ),
                (
                    "total_campaigns_participated",
                    models.IntegerField(
                        default=0, help_text="Número de campanhas que participou"
                    ),
                ),
                (
                    "total_campaigns_responded",
                    models.IntegerField(
                        default=0, help_text="Número de campanhas que respondeu"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Observações livres sobre o contato"
                    ),
                ),
                (
                    "custom_fields",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Campos customizados pelo cliente. Ex: {'cargo': 'Gerente', 'empresa': 'ACME Ltd'}",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Contato ativo no sistema",
                    ),
                ),
                (
                    "opted_out",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Contato pediu para não receber mensagens (LGPD)",
                    ),
                ),
                (
                    "opted_out_at",
                    models.DateTimeField(
                        blank=True, help_text="Data do opt-out", null=True
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("manual", "Cadastro Manual"),
                            ("import", "Importação CSV"),
                            ("whatsapp", "WhatsApp Gateway"),
                            ("api", "API Pública"),
                            ("form", "Formulário Web"),
                        ],
                        default="manual",
                        help_text="Origem do contato",
                        max_length=50,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Usuário que criou o contato",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="contacts_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lists",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Listas de contatos (ex: Black Friday 2024, Aniversariantes)",
                        related_name="contacts",
                        to="contacts.contactlist",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Tags para segmentação (ex: VIP, Inadimplente, Lead Quente)",
                        related_name="contacts",
                        to="contacts.tag",
                    ),
                ),
                (
                    "tenant",
                    models.ForeignKey(
                        help_text="Tenant proprietário do contato",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="tenancy.tenant",
                    ),
                ),
            ],
            options={
                "verbose_name": "Contato",
                "verbose_name_plural": "Contatos",
                "db_table": "contacts_contact",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["tenant", "phone"],
                        name="contacts_co_tenant__bb97d4_idx",
                    ),
                    models.Index(
                        fields=["tenant", "email"],
                        name="contacts_co_tenant__c20f3a_idx",
                    ),
                    models.Index(
                        fields=["tenant", "is_active"],
                        name="contacts_co_tenant__62ace6_idx",
                    ),
                    models.Index(
                        fields=["tenant", "opted_out"],
                        name="contacts_co_tenant__a56743_idx",
                    ),
                    models.Index(
                        fields=["last_purchase_date"],
                        name="contacts_co_last_pu_ee7531_idx",
                    ),
                    models.Index(
                        fields=["birth_date"], name="contacts_co_birth_d_69c128_idx"
                    ),
                    models.Index(
                        fields=["last_interaction_date"],
                        name="contacts_co_last_in_20d572_idx",
                    ),
                ],
                "unique_together": {("tenant", "phone")},
            },
        ),
    ]
