# Generated by Django 4.2.25 on 2025-10-11 13:03

from django.db import migrations, models
import django.db.models.deletion


def setup_user_fields_if_not_exist(apps, schema_editor):
    """
    Verifica e adiciona campos apenas se não existirem
    """
    from django.db import connection
    
    with connection.cursor() as cursor:
        # 1. Verifica campo tenant_id
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='authn_user' AND column_name='tenant_id';
        """)
        tenant_exists = cursor.fetchone()
        
        if tenant_exists:
            print("✅ Campo tenant_id já existe")
        else:
            print("➕ Adicionando campo tenant_id")
            cursor.execute("""
                ALTER TABLE authn_user 
                ADD COLUMN tenant_id UUID NOT NULL REFERENCES tenancy_tenant(id) 
                DEFERRABLE INITIALLY DEFERRED;
            """)
            cursor.execute("""
                CREATE INDEX authn_user_tenant_id_idx ON authn_user(tenant_id);
            """)
        
        # 2. Verifica tabela user_permissions
        cursor.execute("""
            SELECT tablename 
            FROM pg_tables 
            WHERE tablename='authn_user_user_permissions';
        """)
        perm_table_exists = cursor.fetchone()
        
        if perm_table_exists:
            print("✅ Tabela authn_user_user_permissions já existe")
        else:
            print("➕ Criando tabela authn_user_user_permissions")
            cursor.execute("""
                CREATE TABLE authn_user_user_permissions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES authn_user(id) ON DELETE CASCADE,
                    permission_id INTEGER NOT NULL REFERENCES auth_permission(id) ON DELETE CASCADE,
                    UNIQUE (user_id, permission_id)
                );
            """)
            cursor.execute("""
                CREATE INDEX authn_user_user_permissions_user_id_idx 
                ON authn_user_user_permissions(user_id);
            """)
            cursor.execute("""
                CREATE INDEX authn_user_user_permissions_permission_id_idx 
                ON authn_user_user_permissions(permission_id);
            """)


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("tenancy", "0001_initial"),
        ("authn", "0001_initial"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        # Usa RunPython para verificar e criar tudo apenas se necessário
        migrations.RunPython(
            setup_user_fields_if_not_exist,
            reverse_code=migrations.RunPython.noop
        ),
    ]
