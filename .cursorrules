# üö¶ CURSOR RULES - ALREA SENSE

Este projeto segue as regras definidas em `rules.md`.

## üìö Documenta√ß√£o Principal

Leia SEMPRE antes de fazer mudan√ßas:
- `rules.md` - Regras de desenvolvimento e arquitetura atual
- `IMPLEMENTACAO_SISTEMA_MIDIA.md` - Guia completo do sistema de m√≠dia
- `ANALISE_COMPLETA_PROJETO_2025.md` - An√°lise arquitetural

## ‚ö†Ô∏è REGRAS CR√çTICAS

1. **N√ÉO USE CELERY** - O projeto usa RabbitMQ + aio-pika
2. **SEMPRE TESTE ANTES DE COMMIT** - Crie scripts de teste locais
3. **MULTI-TENANT FIRST** - Todo modelo precisa de `tenant_id`
4. **WEBSOCKET PARA REAL-TIME** - Use Channels, n√£o polling
5. **üîê SEGURAN√áA PRIMEIRO** - Veja se√ß√£o de seguran√ßa abaixo

## üîê REGRAS DE SEGURAN√áA (CR√çTICO)

### ‚ùå NUNCA FA√áA ISSO:

1. **NUNCA hardcode credenciais no c√≥digo**
   ```python
   # ‚ùå ERRADO
   API_KEY = '584B4A4A-0815-AC86-DC39-C38FC27E8E17'
   SECRET_KEY = config('SECRET_KEY', default='chave-hardcoded')
   ```

2. **NUNCA exponha API keys em plaintext**
   ```python
   # ‚ùå ERRADO
   return Response({'api_key': connection.api_key})
   ```

3. **NUNCA use CORS_ALLOW_ALL_ORIGINS = True**
   ```python
   # ‚ùå ERRADO
   CORS_ALLOW_ALL_ORIGINS = True
   ```

4. **NUNCA commite secrets no Git**
   - Sempre use vari√°veis de ambiente
   - Use pre-commit hooks para detectar

5. **NUNCA use defaults com valores reais**
   ```python
   # ‚ùå ERRADO
   S3_KEY = getattr(settings, 'S3_KEY', 'valor-real-aqui')
   ```

### ‚úÖ SEMPRE FA√áA ISSO:

1. **SEMPRE use vari√°veis de ambiente**
   ```python
   # ‚úÖ CORRETO
   EVOLUTION_API_KEY = config('EVOLUTION_API_KEY')  # Sem default
   SECRET_KEY = config('SECRET_KEY')  # Sem default
   ```

2. **SEMPRE mascare secrets em respostas de API**
   ```python
   # ‚úÖ CORRETO
   api_key_masked = '****' + api_key[-4:] if len(api_key) > 4 else ''
   return Response({
       'api_key': api_key_masked,
       'api_key_set': bool(connection.api_key)
   })
   ```

3. **SEMPRE restrinja CORS**
   ```python
   # ‚úÖ CORRETO
   CORS_ALLOW_ALL_ORIGINS = False
   CORS_ALLOWED_ORIGINS = [
       'https://alreasense-production.up.railway.app',
       'http://localhost:5173',  # Apenas em dev
   ]
   ```

4. **SEMPRE use pre-commit hooks**
   ```bash
   # Instalar e configurar
   pip install pre-commit
   pre-commit install
   ```

5. **SEMPRE logue acessos sens√≠veis**
   ```python
   # ‚úÖ CORRETO
   logger.warning(f"üîê SENSITIVE ACCESS: {user} acessou {path}")
   ```

6. **SEMPRE implemente rate limiting**
   ```python
   # Para endpoints cr√≠ticos de autentica√ß√£o e configura√ß√£o
   @ratelimit(key='ip', rate='10/h', method='POST')
   ```

### üõ°Ô∏è PROTE√á√ïES IMPLEMENTADAS:

1. **Security Middleware** (`apps.common.security_middleware`)
   - Auditoria autom√°tica de acessos sens√≠veis
   - Security headers autom√°ticos
   - Rate limiting b√°sico

2. **Pre-commit Hooks** (`.pre-commit-config.yaml`)
   - Detecta credenciais antes do commit
   - Bloqueia secrets automaticamente
   - Verifica debug prints

3. **API Key Masking** (todas as views de configura√ß√£o)
   - Keys sempre mascaradas em GET
   - Flag `api_key_set` indica se configurada
   - Aceita update mas nunca retorna completa

4. **Fail Securely**
   - Se credencial n√£o existe ‚Üí sistema falha (comportamento desejado)
   - Melhor quebrar do que usar defaults inseguros

### üìã CHECKLIST DE SEGURAN√áA:

Antes de commitar c√≥digo novo, verifique:

- [ ] Nenhuma credencial hardcoded?
- [ ] Secrets mascarados em APIs?
- [ ] Vari√°veis de ambiente usadas?
- [ ] CORS restrito?
- [ ] Endpoints sens√≠veis com autentica√ß√£o?
- [ ] Rate limiting implementado?
- [ ] Logs de auditoria adicionados?
- [ ] Pre-commit hooks passaram?

### üìö DOCUMENTA√á√ÉO DE SEGURAN√áA:

- `ANALISE_SEGURANCA_COMPLETA.md` - An√°lise detalhada
- `README_SEGURANCA_URGENTE.md` - Guia r√°pido
- `REFATORACAO_COMPLETA.md` - Mudan√ßas aplicadas
- `ROTACAO_CREDENCIAIS_URGENTE.md` - Como rotacionar

## üéØ STACK ATUAL

- Backend: Django 5 + DRF + Channels + RabbitMQ
- Frontend: React 18 + TypeScript + Vite + Zustand
- Database: PostgreSQL 15 + pgvector
- Cache: Redis 7
- Storage: MinIO/S3 (Railway)
- Queue: RabbitMQ (N√ÉO Celery!)

## üì¶ PRODUTOS ATIVOS

- Flow (Campanhas + Chat + Contatos)
- Sense (IA - legado)
- Notifications
- API P√∫blica

Para detalhes completos, consulte `rules.md`.

